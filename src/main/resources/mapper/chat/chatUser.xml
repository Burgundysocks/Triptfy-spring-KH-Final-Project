<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.t1.tripfy.mapper.chat.ChatUserMapper">
	<!-- userid로 chat_user 테이블 행 긁어오기 -->
	<select id="selectSpecificChatUserByUserid">
		SELECT * FROM chat_user
		WHERE userid = #{userid}
	</select>
	<!--
		채팅방의 상대 유저 userid만 가져오기
		요청자 제외
		다대다 가능
	-->
	<select id="selectOpponentUserid">
		SELECT userid
		FROM chat_user
		WHERE
				chat_room_idx = #{chatRoomIdx}
			AND
				userid != #{userid}
	</select>
	
	<!-- 
		채팅방의 상대 유저정보 가져오기
		요청자 제외
		다대다 가능
	-->
	<select id="selectOpponentUserInfo">
		SELECT *
		FROM chat_user
		WHERE
				chat_room_idx = #{chatRoomIdx}
			AND
				userid != #{userid}
	</select>
	
	<!-- 
		userid로 chat_user 테이블 행 개수 가져오기
	-->
	<select id="selectCountOfSpecificChatUserByUserid">
		SELECT count(*)
		FROM chat_user
		WHERE
				userid = #{userid}
			AND
				chat_user_is_quit = false
	</select>
	
	
	<!--
		userid가 가입된 모든 채팅방 중 최근 수신순 x ~ y 개의 chat_room_idx 가져오기
		chat_detail과 JOIN함
	-->
	<select id="selectSpecificRecentReceivedChatRoomIdx">
		<!--
		SELECT
			cu.chat_room_idx, MAX(cd.regdate) as regdate
		FROM
			chat_user AS cu
		JOIN 
			chat_detail AS cd
		ON 
			cu.chat_room_idx = cd.chat_room_idx 
		AND 
			cu.userid = cd.userid
		WHERE 
			cu.userid = #{userid}
		GROUP BY 
			cu.chat_room_idx
		ORDER BY 
			regdate DESC
		LIMIT 
			#{start}, #{end};
		-->
		SELECT 
			cu.chat_room_idx, MAX(cd.regdate) as last_message_date
		FROM 
			chat_user AS cu
		LEFT JOIN 
			chat_detail AS cd
		ON 
			cu.chat_room_idx = cd.chat_room_idx AND cu.userid = cd.userid
		WHERE 
			cu.userid = #{userid}
		GROUP BY 
			cu.chat_room_idx
		ORDER BY 
			last_message_date DESC
		LIMIT 
			#{start}, #{end};
	</select>
	
	<!-- 
		userid로 채팅방 가져오기
		닫힌 채팅방은 가져오지 않는다
	-->
	<select id="selectAllByUserid">
		SELECT 
			cu.chat_room_idx, cr.chat_room_type, cr.chat_room_title, cr.packagenum, cr.chat_room_is_terminated, cu.chat_user_is_creator, cr.regdate, MAX(cd.regdate) as last_msg_date
		FROM 
			chat_user AS cu
		INNER JOIN 
			chat_room AS cr
		ON 
			cu.chat_room_idx = cr.chat_room_idx
		LEFT JOIN 
			chat_detail AS cd
		ON 
			cu.chat_room_idx = cd.chat_room_idx
		WHERE
				cu.userid = #{userid}
			AND
				cu.chat_user_is_quit = false
		GROUP BY
			cu.chat_room_idx
		ORDER BY
			CASE
				WHEN
					last_msg_date IS NULL
				THEN
					cr.regdate
				ELSE
					last_msg_date
			END DESC
	</select>
	
	<!-- 
		마지막 확인 메시지 수정
	-->
	<update id="updateChatDetailIdx">
		UPDATE chat_user
		SET
			chat_detail_idx = #{chatDetailIdx}
		WHERE
			chat_room_idx = #{chatRoomIdx}
		AND
			userid = #{userid}
	</update>
	<!-- 
		메시지 전부 확인처리
	-->
	<update id="updateChatDetailIdxToEnd">
		UPDATE chat_user
		SET
			chat_detail_idx = (
				SELECT chat_detail_idx
				FROM chat_detail
				WHERE
					chat_room_idx = #{chatRoomIdx}
				ORDER BY
					chat_detail_idx DESC
				LIMIT 1
			)
		WHERE
			chat_room_idx = #{chatRoomIdx}
		AND
			userid = #{userid}
	</update>
	
	<!-- 
		유저 추가
	-->
	<insert id="insertRow">
		INSERT INTO
			chat_user
		VALUES
		<foreach collection="userList" item="dto" separator=",">
			(
				#{dto.chatRoomIdx}, 
				#{dto.userid}, 
				#{dto.chatUserIsCreator}, 
				false,
				null
			)
		</foreach>
	</insert>
</mapper>